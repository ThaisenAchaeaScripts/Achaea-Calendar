<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Achaea Calendar</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>acal_reminder_open</name>
				<script>acal.reminders = {}
deleteLine()</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>999</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^ID\s*Repeat\s*Date\s*Reminder\s*</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>acal_reminder_capture</name>
					<script>--id, reminder, year, month, day
acal.addReminder(matches[2],matches[6],matches[5],matches[4],matches[3])</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\d+)\s+\w+\s+(\d+)\w+\s(\w+)\s(\d+)\s+(.+)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>acal_reminder_gag</name>
					<script>deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return not isPrompt()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>acal_reminder_close</name>
					<script>setTriggerStayOpen('acal_reminder_open',0)
disableTrigger('acal_reminder_open')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return isPrompt()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>acal_upcoming_open</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>999</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>Upcoming events and happenings.</string>
					<string>No upcoming events.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
					<integer>3</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>acal_upcoming_capture</name>
					<script>--id, event, days, hours, minutes
acal.addUpcomingEvent(matches[2],matches[3],matches[4],matches[5],matches[6])</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\d+)\s+(.{1,50})\s*(?:(\d+)d)?\s*(?:(\d+)h)?\s*(?:(\d+)m)?$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>acal_upcoming_gag</name>
					<script>deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return not isPrompt()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>acal_upcoming_close</name>
					<script>setTriggerStayOpen('acal_upcoming_open',0)
disableTrigger('acal_upcoming_open')</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return isPrompt()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Achaea Calendendar</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>Achaean Calendar</name>
				<script>local offset = matches[2]
if not offset then offset = 0 end
acal.whipHampsters(offset)</script>
				<command></command>
				<packageName></packageName>
				<regex>^(?i)acal(?: ([0-9]))?$</regex>
			</Alias>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Achaea Calendar</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>acal_config</name>
				<packageName></packageName>
				<script>acal = acal or {}

acal.config = acal.config or {}

acal.config.bgcolors = {
 	{5,90,156},
  {27,117,179},
  {0,162,173},
  {0,160,64},
  {129,183,61},
  {240,229,37},
  {245,193,14},
  {240,144,32},
  {230,95,37},
  {218,38,41},
  {128,51,128},
  {50,57,135}
}

acal.config.months = {
 {'Sarapin','HELP SARAPIS','Learn more about The Logos!'},
 {'Daedalan','HELP DAEDALUS','Learn more about The Guardian of Balance!'},
 {'Aeguary','HELP AEGIS','Learn more about The God of War!'},
 {'Miraman','HELP MIRAMAR','Learn more about The Goddess of Justice!'},
 {'Scarlatan','HELP SCARLATTI','Learn more about The Great Bard!'},
 {'Ero','HELP EROS','Learn more about The God of Love!'},
 {'Valnuary','HELP VALNURANA','Learn more about The Goddess of Sleep and Dreams!'},
 {'Lupar','HELP LUPUS','Learn more about The Wild God of the Beasts!'},
 {'Phaestian','HELP PHAESTUS', 'Learn more about The Smith!'},
 {'Chronos','HELP AEON','Learn more about The Lord of Time!'},
 {'Glacian','HELP GLACIUS','Not much is known about Glacius, unfortunantly!'},
 {'Mayan','HELP MAYA','Learn more about The Great Mother!'}
}</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>acal_main</name>
				<packageName></packageName>
				<script>--displays the calendar with a given year offset
function acal.displayCalendar(year_offset)
  
  local s --major sections 
  local x --columns
  local y --minor sections
  local z --rows
  
  local mname --month name
  local mfg --month foreground
  local mbg --month background
  local sep = ' | '
  
  local year = acal.time.year + year_offset
  local month --month getLineNumber
  local day --day number
  local serenades = acal.getSerenades()
  
  for s=1,3,1 do --Sections
		if s==1 then echo(' +--------------------- ACHAEAN CALENDAR '..year..' AF ---------------------+ ') end
  	echo('\n')
  	echo(sep)
  	for h=1,4 do --Headers
  		month = ((s-1)*4)+h
  		mname = acal.config.months[month][1]
  		mbg = acal.config.bgcolors[month]
  		mfg = acal.getFg(mbg[1],mbg[2],mbg[3])
      
  		local s1 = math.floor((14-#mname)/2)
  		local s2 = 14-#mname-s1
  		local txt = mname
  		local cmd = [[send(']]..acal.config.months[month][2]..[[',false)]]
  		local hnt = acal.config.months[month][3]
			
  		setFgColor(mfg[1],mfg[2],mfg[3])
  		setBgColor(mbg[1],mbg[2],mbg[3])
  		echo(string.rep(' ',s1))
			echoLink(txt,cmd,hnt,true)
  		echo(string.rep(' ',s2))
  		resetFormat()
  		echo(sep)
  	
  	end --for Headers
  	
  	for x=1,5,1 do --Details X Rows
  		echo('\n')
  		for y=1,4,1 do --Details Y Sections
  			echo(sep)
  			month = ((s-1)*4)+y
  			mname = acal.config.months[month][1]
  			for z=1,5,1 do --Details Z Columns
  				day = ((x-1)*5)+z
          
          --check for sernade
          local sstring = ''
  				if aCal.checkSeranade(serenades, year, month, day) then
  					setFgColor(0,0,0)
  					setBgColor(200,200,200)
            sstring = '\nOrphean Serenade'
  				end --if
          
          --check for upcoming
          local ustring = acal.returnEvents(year, month, day)
          if ustring ~= '' then
            setFgColor(0,0,0)
            setBgColor(255,0,0)
          end --if
          
          --check for reminders
          local rstring = acal.returnReminders(year, mname, day)
          if rstring ~= '' then
            setFgColor(0,0,0)
            setBgColor(255,255,0)
          end --if
          
          --color for both reminder and event 
          if rstring ~= '' and ustring ~= '' then
            setFgColor(0,0,0)
            setBgColor(255,140,0)
          end --if
          
          --check for current day
  				if acal.checkCurrentDay(year, month, day) then
  					setFgColor(0,0,0)
  					setBgColor(57,255,20)
  				end --if
          
  				local txt = string.format('%2s',day)
  				local cmd = [[send('date ]]..tostring(day)..[[ ]]..tostring(mname)..[[ ]]..tostring(year)..[[',false)]]
  				local hnt = acal.returnLocalTime(year,month,day)..sstring..ustring..rstring
  				echoLink(txt,cmd,hnt,true)
  				resetFormat()
  				if z~=5 then echo(' ') end
  			end --z
  		end --y
  		echo(sep)
  	end --for x  	
  end --sections
	echo('\n +-------------------------------------------------------------------+ ')
	send(' ')
end--function

function acal.whipHampsters(year_offset)

  if gmcp.Char.Name.name == 'Jinsun' then
    echo('\nBAHAHAHA! Pirates don\'t get fancy calendars!')
  else
    enableTrigger('acal_upcoming_open')
    enableTrigger('acal_reminder_open')
    sendGMCP("IRE.Time.Request")
    send('upcoming',false)
    send('reminder list',false)
    tempTimer(.5,[[acal.displayCalendar(]]..year_offset..[[)]])
  end
end 

function acal.getSerenades()

	local serenades = {}
	local current_hour = os.date("!%H")*1
	local sd = 0
  local sm = 0
  local sy = 0
  local d = 0
  local m = 0
  local y = 0

	--get starting seranade
	if acal.time.day - current_hour &gt; 0 then
		sd = acal.time.day - current_hour
		sm = acal.time.mon
    sy = acal.time.year
	else
		sd = 25 + acal.time.day - current_hour
		sm = acal.time.mon - 1
    sy = acal.time.year
	end
	table.insert(serenades,sy..'-'..sm..'-'..sd)
	
  --get previous seranades
  d = sd
  m = sm
  y = sy
  for i=1,12,1 do
		if d - 24 &gt; 0 then --serenade in same month
			d = d - 24
			m = m
		else
			d = d + 1
			m = m - 1
		end
		table.insert(serenades,y..'-'..m..'-'..d)
	end --for
  
  --get future seranades
  d = sd
  m = sm
  y = sy
  for i=1,120,1 do
		if d + 24 &lt; 26 then --serenade in same month
      d = d + 24
      m = m
      y = y
    else
      if m + 1 &lt; 13 then --serenade in same year
        d = d - 1
        m = m + 1
        y = y
      else
        d = d - 1
        m = 1
        y = y + 1
      end
    end
    table.insert(serenades,y..'-'..m..'-'..d)
  end --for
	
  return serenades
  
end --function


function acal.checkSeranade(serenades, y, m, d)
	local key = y..'-'..m..'-'..d
  return table.contains(serenades,key)
end --function


function acal.checkCurrentDay(y,m,d)
  local cd = tonumber(acal.time.day)
  local cm = tonumber(acal.time.mon)
  local cy = tonumber(acal.time.year)
  
  if y == cy and m == cm and d == cd then
    return true
  else
    return false
  end

end --function

--function to determine proper foreground colour
function acal.getFg(r,g,b)
  if (r*0.299 + g*0.587 + b*0.114) &gt; 150 then
    return {0,0,0}
  else
    return {255,255,255}
  end
end

--append events 
function acal.addUpcomingEvent(id,event,days,hours,minutes)
  if days == '' then days = 0 else days = tonumber(days) end
  if hours == '' then hours = 0 else hours = tonumber(hours) end
  if minutes == '' then minutes = 0 else minutes = tonumber(minutes) end
  local t = (days * 24) + hours
  if minutes &gt; 30 then t = t + 1 end
  acal.events[id] = {event:trim(),t}
end

--return events for specific day
function acal.returnEvents(y, m, d)
  local d1 = (acal.time.year - 1) * 300 + (acal.time.mon - 1) * 25 + acal.time.day
  local d2 = (y - 1) * 300 + (m - 1) * 25 + d
  local d = d2 - d1
  local s = ''
  for _, e in pairs(acal.events) do
    if e[2] == d then
      s = s..'\n(U) '..e[1]
    end
  end --for
  return s
end

--adds a reminder to the list
function acal.addReminder(id,reminder,year,month,day)
  day = tonumber(day)
  year = tonumber(year)
  acal.reminders[id] = {reminder:trim(),year,month,day}
end --function

--return reminders for day
function acal.returnReminders(y,m,d)
  local s = ''
  for _, r in pairs(acal.reminders) do
    if r[2] == y and r[3] == m and r[4] == d then
      s = s..'\n(R) '..r[1]
    end
  end --for
  return s
end --function

--return local time 
function acal.returnLocalTime(y,m,d)
  local d1 = (acal.time.year - 1) * 300 + (acal.time.mon - 1) * 25 + acal.time.day
  local d2 = (y - 1) * 300 + (m - 1) * 25 + d
  local d = d2 - d1
  local t = os.date("%B %d (%I%p)",os.time()+(d*60*60))
  return t
end --function</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>acal_time_capture</name>
				<packageName></packageName>
				<script>
--sets time as it recieves it via gmcp
function acal.setTime()
  acal.time = gmcp.IRE.Time.List
end

--updates time as it recieves it via gmcp
function acal.updateTime()
  display('new time')
  if acal.time then
    for k,v in pairs(gmcp.IRE.Time.Update) do
      display(k)
      display(v)
			acal.time[k] = v
		end
	end
end

--adds support for gmcp time
function acal.registerTime()
  gmod.enableModule("achaea-calendar", "IRE.Time")
end

acal.registerTime()
registerAnonymousEventHandler("sysConnectionEvent","acal.registerTime")
registerAnonymousEventHandler("gmcp.IRE.Time", "acal.setTime")
registerAnonymousEventHandler("gmcp.IRE.Time.Update", "acal.updateTime")</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<VariablePackage>
		<HiddenVariables />
	</VariablePackage>
</MudletPackage>
